@startuml
abstract Player{
-nb_points int
-name string
-Bank banque
-const RessourceCard** cards[3]
-const NobleCard** nobles
+play()
+pay()
+addNoble()
+checkBonuses()
}

enum Token{
BLEU,ROUGE,VERT,BLANC,NOIR,JAUNE;
}

class Bank {
-int tokens[6]
+bool empty(Token t) const
+int amount(Token t) const
+int take(Token t, int amount)
+int put(Token t, int amount)
}

abstract BaseCard{
-int cost[5]
-void setCost(int newCost[])
+BaseCard(int c[], int p)
+const int* getFullCost()
+int getCost(Token t) const
}

class ResourceCard{
-Token resource
-int level
-hidden bool
-reserved bool
+ResourceCard(int c[], int p, Token r, int l)
+Token getResource() const
+int getLevel() const
}

class NobleCard{
-int prestige
+NobleCard(int c[], int p)
+int getPrestige() const
}

class Tour{
-int active_player
-Action** listActions
+void beginTour()
+Action* getAction(const int i)
+void endTour()
}

abstract Action{
}

class Take_2_identical_Token{
-Token color
+BankUpdate()
+PlayerUpdateToken()
}

class ReservCard{
-const BaseCard card
+UpdateBaseCard()
}

class BuyCard{
-const BaseCard card
+BankUpdate()
+PlayerUpdateToken()
+PlayerUpdateCard()
+BoardUpdateCard()
}

class Take_3_diff_Token{
-Token color1
-Token color2
-Token color3
+BankUpdate()
+PlayerUpdateToken()
}

class DrawPile{
-size_t nb
-size_t nbMax
-const BaseCard* cards[nbMax]
+BaseCard* pick()
}

class Board{
-const BaseCard* cards[3][5]
-const Bank bank
-const DrawPile drawpiles[3]
+pick()
+refile()
}

class Deck{
-const BaseCard** cards
-size_t nb
-size_t nbMax
}

class Controller{
-Deck deck
-Board board
-size_t nb_players
-Player players[nb_players]
+start()
+end()
}

class Rules{
-int [nomRegle]
+winCondition()
}

Action "1" - "1" Player : Realise <
(Action, Player).Tour
Controller *-- "1" Deck
Player "2..4"  -*  Controller
Controller *---"1" Board
Rules "1"-* Action
Board o--"*" BaseCard
DrawPile.. DrawPile_lv1  : instance
DrawPile.. DrawPile_lv2 : instance
DrawPile .. DrawPile_lv3 : instance
DrawPile o-- BaseCard
Board *-- DrawPile
BaseCard -* Deck
Bank "1"--o Board
Player o--"1" Bank
Token -o Bank
BaseCard <|-- NobleCard
BaseCard <|-- ResourceCard
Human --|> Player
IA --|> Player
Take_3_diff_Token --|> Action
Take_2_identical_Token --|> Action
BuyCard--|> Action
ReservCard--|> Action

Player o--"*"BaseCard



note left of Board #aqua: Begining Token : \n-if 2 players:5 gold, 4 of the others \n-if 3 players:5 of each \n-if 4 players:5 gold, 7 of the others \nBegining NobleCard : \n nb of players+1 cards
note bottom of DrawPile_lv3 #aqua: Begining :20 cards
note bottom of DrawPile_lv2 #aqua: Begining:30 cards
note bottom of DrawPile_lv1 #aqua: Begining:40 cards
@enduml
